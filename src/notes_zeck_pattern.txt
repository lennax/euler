1	z: 1

2	z: 1

3	z: 1
4	z: 2

5	z: 1
6	z: 2
7	z: 2

8	z: 1
9	z: 2
10	z: 2
11	z: 2
12	z: 3

13	z: 1
14	z: 2
15	z: 2
16	z: 2
17	z: 3
18	z: 2
19	z: 3
20	z: 3

21	z: 1
22	z: 2
23	z: 2
24	z: 2
25	z: 3
26	z: 2
27	z: 3
28	z: 3
29	z: 2
30	z: 3
31	z: 3
32	z: 3
33	z: 4

34	z: 1
35	z: 2
36	z: 2
37	z: 2
38	z: 3
39	z: 2
40	z: 3
41	z: 3
42	z: 2
43	z: 3
44	z: 3
45	z: 3
46	z: 4
47	z: 2
48	z: 3
49	z: 3
50	z: 3
51	z: 4
52	z: 3
53	z: 4
54	z: 4

55	z: 1
56	z: 2
57	z: 2
58	z: 2
59	z: 3
60	z: 2
61	z: 3
62	z: 3
63	z: 2
64	z: 3
65	z: 3
66	z: 3
67	z: 4
68	z: 2
69	z: 3
70	z: 3
71	z: 3
72	z: 4
73	z: 3
74	z: 4
75	z: 4
76	z: 2
77	z: 3
78	z: 3
79	z: 3
80	z: 4
81	z: 3
82	z: 4
83	z: 4
84	z: 3
85	z: 4
86	z: 4
87	z: 4
88	z: 5

start at second to last member of fib vector ( _fibs[_fibs.size()-2] )
running sum of Zeckendorf numbers of i
if number of items in sum equals a Fibonacci number (less than second to last)
	or equals the remainder ( argMax - _fibs[_fibs.size()-1] )
	add the running sum to the total sum
i > _fibs[_fibs.size()-2] && i < _fibs[_fibs.size()-1] 

// zeck starts at 1 to count the second to last fib
mpz_class zeckTotal = 0, zeckRunning = 1, zeckCount = 1;
for ( mpz_class i = _fibs[_fibs.size()-2] + 1; i < _fibs[_fibs.size()-1] ) {
	uint32_t fibIndex = _fibs.size()-2;
	// none in this range will have zeck 1; all non-fib
	mpz_class zeck = _getZeck(i, fibIndex); 
	zeckRunning += zeck; 
	zeckCount++;
	for ( uint32_t k = 0; k < fibIndex+1; k++ ) {
		if ( zeckCount == _fibs[k] || zeckCount == argMax - _fibs[_fibs.size()-1] ) {
			zeckTotal += zeckRunning; 
		}
	}
}